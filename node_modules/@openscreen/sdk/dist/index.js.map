{"version":3,"file":"index.js","sources":["../src/entities/account_status.ts","../src/entities/account_user_role.ts","../src/entities/project_invitation_status.ts","../src/entities/project_status.ts","../src/entities/project_user_role.ts","../src/entities/qr_code_error_correction_level.ts","../src/entities/qr_code_intent_type.ts","../src/entities/qr_code_locator_key_type.ts","../src/entities/qr_code_status.ts","../src/entities/qr_code_type.ts","../src/auth/cognito-user-async.ts","../src/auth/cognito-user-pool-async.ts","../src/auth/user-pool.ts","../src/request.ts","../src/utils.ts","../src/endpoint.ts","../src/accounts.ts","../src/api-keys.ts","../src/assets.ts","../src/contacts.ts","../src/invitations.ts","../src/projects.ts","../src/scans.ts","../src/qrCodes.ts","../src/users.ts","../src/openscreen.ts"],"sourcesContent":["//// AccountStatus\n\nexport enum AccountStatus {\n    ACTIVE = 'ACTIVE',\n    SUSPENDED = 'SUSPENDED',\n}","//// AccountUserRole\n\nexport enum AccountUserRole {\n    OWNER = 'OWNER',\n    ADMINISTRATOR = 'ADMINISTRATOR',\n    BILLING_CONTACT = 'BILLING_CONTACT',\n    MEMBER = 'MEMBER',\n    API_KEY = 'API-KEY',\n    INVITATION_DECLINED = 'INVITATION_DECLINED',\n}","//// ProjectInvitationStatus\n\nexport enum ProjectInvitationStatus {\n    ACCEPTED = 'ACCEPTED',\n    PENDING = 'PENDING',\n    EXPIRED = 'EXPIRED',\n}","//// ProjectStatus\n\nexport enum ProjectStatus {\n    ACTIVE = 'ACTIVE',\n    SUSPENDED = 'SUSPENDED',\n}","//// ProjectUserRole\n\nexport enum ProjectUserRole {\n    OWNER = 'OWNER',\n    ADMINISTRATOR = 'ADMINISTRATOR',\n    BILLING_CONTACT = 'BILLING_CONTACT',\n    MEMBER = 'MEMBER',\n    API_KEY = 'API_KEY',\n}","//// QrCodeErrorCorrectionLevel\n\nexport enum QrCodeErrorCorrectionLevel {\n    L = 'L',\n    M = 'M',\n    Q = 'Q',\n    H = 'H',\n}","//// QrCodeIntentType\n\nexport enum QrCodeIntentType {\n    STATIC_REDIRECT = 'STATIC_REDIRECT',\n    DYNAMIC_REDIRECT = 'DYNAMIC_REDIRECT',\n    DYNAMIC_REDIRECT_TO_APP = 'DYNAMIC_REDIRECT_TO_APP',\n}","//// QrCodeLocatorKeyType\n\nexport enum QrCodeLocatorKeyType {\n    SHORT_URL = 'SHORT_URL',\n    HASHED_ID = 'HASHED_ID',\n    SECURE_ID = 'SECURE_ID',\n}","//// QrCodeStatus\n\nexport enum QrCodeStatus {\n    ACTIVE = 'ACTIVE',\n    SUSPENDED = 'SUSPENDED',\n}","//// QrCodeType\n\nexport enum QrCodeType {\n    PNG = 'png',\n    SVG = 'svg',\n}","import {CognitoUser, AuthenticationDetails, CognitoUserSession} from 'amazon-cognito-identity-js'\n\nexport interface AuthenticateResponse {\n  session?: CognitoUserSession\n  challengeName?: String\n  challengeParameters?: Object\n}\n\nexport class CognitoUserAsync extends CognitoUser {\n  async authenticateUser(authenticationDetails: AuthenticationDetails) {\n    return new Promise<AuthenticateResponse>((resolve, reject) => {\n      super.authenticateUser(authenticationDetails, {\n        onSuccess: (session: CognitoUserSession) => resolve({session}),\n        onFailure: (err: Error) => reject(err),\n        mfaRequired: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        selectMFAType: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        mfaSetup: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        totpRequired: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        customChallenge: (challengeParameters: Object) => resolve({challengeParameters}),\n      })\n    })\n  }\n\n  async getSession() {\n    return new Promise<CognitoUserSession>((resolve, reject) => {\n      super.getSession((err: any, session: CognitoUserSession) => {\n        if (err) return reject(err)\n        return resolve(session)\n      })\n    })\n  }\n}\n","import {CognitoUserPool, CognitoUserAttribute, ISignUpResult} from 'amazon-cognito-identity-js'\nimport {IAuthStorage} from './auth-storage'\n\nexport class CognitoUserPoolAsync extends CognitoUserPool {\n  getStorage(): IAuthStorage {\n    return (this as any).storage\n  }\n\n  getClientId(): string {\n    return (this as any).clientId\n  }\n\n  async signUp(\n    username: string,\n    password: string,\n    userAttributes: CognitoUserAttribute[],\n    validationData: CognitoUserAttribute[],\n  ) {\n    return new Promise<ISignUpResult>((resolve, reject) => {\n      super.signUp(username, password, userAttributes, validationData, (err?: Error, result?: ISignUpResult) => {\n        if (err) return reject(err)\n        return resolve(result!)\n      })\n    })\n  }\n}\n","import {AuthenticationDetails, CognitoUserAttribute} from 'amazon-cognito-identity-js'\nimport {CognitoUserAsync} from './cognito-user-async'\nimport {CognitoUserPoolAsync} from './cognito-user-pool-async'\nimport {IAuthStorage} from './auth-storage'\n\nexport class UserPool {\n  userPool: CognitoUserPoolAsync\n\n  constructor(userPoolId: string, clientId: string, storage?: IAuthStorage) {\n    this.userPool = new CognitoUserPoolAsync({\n      UserPoolId: userPoolId,\n      ClientId: clientId,\n      Storage: storage,\n    })\n  }\n\n  getCognitoUserPool(): CognitoUserPoolAsync {\n    return this.userPool\n  }\n\n  getStorage(): IAuthStorage {\n    return this.userPool.getStorage()\n  }\n\n  getUser(key: string): CognitoUserAsync | null {\n    if (key) {\n      const username = this.userPool.getStorage().getItem(`keyToUsername.${Buffer.from(key).toString('base64')}`)\n      if (username) {\n        return new CognitoUserAsync({\n          Username: username,\n          Pool: this.userPool,\n          Storage: this.userPool.getStorage(),\n        })\n      }\n      return null\n    }\n    const lastAuthUser = this.userPool\n      .getStorage()\n      .getItem(`CognitoIdentityServiceProvider.${this.userPool.getClientId()}.LastAuthUser`)\n    if (lastAuthUser) {\n      return new CognitoUserAsync({\n        Username: lastAuthUser,\n        Pool: this.userPool,\n        Storage: this.userPool.getStorage(),\n      })\n    }\n    return null\n  }\n\n  async authenticate(key: string, secret: string) {\n    const cognitoUser = new CognitoUserAsync({\n      Username: key,\n      Pool: this.userPool,\n      Storage: this.userPool.getStorage(),\n    })\n    const authenticationDetails = new AuthenticationDetails({\n      Username: key,\n      Password: secret,\n    })\n    return cognitoUser.authenticateUser(authenticationDetails).then((response) => {\n      if (response.session) {\n        const username = cognitoUser.getUsername()\n        this.userPool.getStorage().setItem(`keyToUsername.${Buffer.from(key).toString('base64')}`, username)\n        return cognitoUser\n      }\n      return null\n    })\n  }\n\n  async signUp(email: string, password: string, attributes: any) {\n    const attributeList: CognitoUserAttribute[] = []\n    attributeList.push(new CognitoUserAttribute({Name: 'given_name', Value: attributes.givenName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'middle_name', Value: attributes.middleName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'family_name', Value: attributes.familyName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'phone_number', Value: attributes.phoneNumber}))\n    attributeList.push(new CognitoUserAttribute({Name: 'email', Value: email}))\n    return this.userPool.signUp(email, password, attributeList, [])\n  }\n}\n","/* eslint-disable no-console */\nimport axios, {AxiosInstance, AxiosResponse} from 'axios'\nimport {makeURL} from './utils'\nimport {ICloudConfig} from './cloud-config'\n// eslint-disable-next-line import/no-cycle\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class Request {\n  session: IOpenscreenSession\n  axios: AxiosInstance\n\n  constructor(session: IOpenscreenSession) {\n    this.session = session\n    this.axios = axios.create({\n      timeout: 10000,\n      responseType: 'json',\n      maxContentLength: 50000,\n      maxBodyLength: 50000,\n      maxRedirects: 1,\n      decompress: true,\n    })\n  }\n\n  async makeURL(path: string): Promise<string> {\n    const cloudConfig = await this.session.getCloudConfig()\n    return makeURL(cloudConfig.endpoint, path)\n  }\n\n  async getAuthorization(): Promise<string> {\n    const user = await this.session.getActiveUser()\n    const session = await user.getSession()\n    if (!session) throw Error('Openscreen No session available')\n    const token = await session.getAccessToken().getJwtToken()\n    return `Bearer ${token}`\n  }\n\n  async post(path: string, params: Object = {}, data: Object = {}, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`POST ${url}`)\n      console.debug(JSON.stringify(data, null, 2))\n    }\n    const response = await this.axios.post(url, data, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async postBatch(path: string, params: Object = {}, data: Object, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`POST ${url}`)\n      console.debug(JSON.stringify(data, null, 2))\n    }\n    const response = await this.axios.post(url, data, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async get(path: string, params: Object = {}, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`GET ${url}`)\n    }\n    const response = await this.axios.get(url, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async getList(path: string, params: Object = {}, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`GET ${url}`)\n    }\n    const response = await this.axios.get(url, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async patch(path: string, params: Object = {}, data: Object = {}, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`PATCH ${url}`)\n      console.debug(JSON.stringify(data, null, 2))\n    }\n    const response = await axios.patch(url, data, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      data,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async delete(path: string, params: Object = {}, options: Object = {}): Promise<boolean> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`DELETE ${url}`)\n    }\n    await axios.delete(await this.makeURL(path), {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    return true\n  }\n}\n\nexport async function getConfig(stageAndAuth: string): Promise<ICloudConfig> {\n  const thisAxios = axios.create({\n    baseURL: 'https://config.openscreen.com',\n    timeout: 10000,\n    responseType: 'json',\n    maxContentLength: 50000,\n    maxBodyLength: 50000,\n    maxRedirects: 1,\n    decompress: true,\n  })\n  return thisAxios\n    .get(`${stageAndAuth}.json`)\n    .then((response: AxiosResponse) => response.data)\n    .catch((err: {message: any}) => {\n      throw new Error(`Unable to load configuration '${stageAndAuth}': ${err.message}`)\n    })\n}\n","// export function makeURL(baseURL: string, urlPath: string) {\n//     return `${baseURL.replace(/\\/+$/, '')  }/${  urlPath.replace(/^\\/+/, '')}`\n// }\n//\nexport function makeURL(baseURL: string, ...pathSegments: string[]) {\n  const parts: string[] = [baseURL.replace(/\\/+$/, '')]\n  pathSegments.forEach((segment) => {\n    if (segment && segment !== '') {\n      parts.push(segment.replace(/^\\/+/, ''))\n    }\n  })\n  return parts.join('/')\n}\n","import {Request} from './request'\nimport {IOpenscreenSession} from './openscreen-session'\n\nfunction singularOf(name: string): string {\n  if (name.endsWith('s')) return name.substring(0, name.length - 1)\n  return name\n}\n\nexport class Endpoint {\n  protected session: IOpenscreenSession\n  protected request: Request\n  protected id?: string\n  protected path: string\n  protected sdkPath: string\n\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, entityName: string, id?: string) {\n    this.session = session\n    this.request = session.getRequest(entityName) as Request\n    this.id = id\n    if (id) {\n      this.path = `${basePath}/${entityName}/${id}`\n    } else {\n      this.path = `${basePath}/${entityName}`\n    }\n    if (id) {\n      const sdkEntityName = singularOf(entityName)\n      this.sdkPath = `${sdkBasePath}.${sdkEntityName}(${sdkEntityName}Id)`\n    } else {\n      this.sdkPath = `${sdkBasePath}.${entityName}()`\n    }\n  }\n\n  getSession(): IOpenscreenSession {\n    return this.session\n  }\n\n  getPath(): string {\n    return this.path\n  }\n\n  getSdkPath(): string {\n    return this.sdkPath!\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(this.getSdkPath())\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {\n  IAccount,\n  IApiKey,\n  IAccountInvitation,\n  IProject,\n} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class AccountProjectsEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `projects`)\n  }\n\n  async create(project: IProject): Promise<IProject> {\n    return this.request.post(this.getPath(), {}, project)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(project: IProject)`)\n    acc.push(`${this.getSdkPath()}.get(): IProject`)\n  }\n}\n\nexport class AccountProjectEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint, projectId: string) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `projects`, projectId)\n  }\n\n  async moveProjectToAccount(): Promise<boolean> {\n    await this.request.post(this.getPath(), {}, {})\n    return true\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.moveProjectToAccount()`)\n  }\n}\n\nexport class AccountApiKeysEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `apikeys`)\n  }\n\n  async create(apiKey: IApiKey): Promise<any> {\n    return this.request.post(this.getPath(), {}, apiKey)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(apiKey: IApiKey)`)\n    acc.push(`${this.getSdkPath()}.get(): IApiKey`)\n  }\n}\n\nexport class AccountInvitationsEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `invitations`)\n  }\n\n  async create(invitation: IAccountInvitation): Promise<any> {\n    return this.request.post(this.getPath(), {}, invitation)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(invitation: IAccountInvitation)`)\n    acc.push(`${this.getSdkPath()}.get(): IAccountInvitation`)\n  }\n}\n\nexport class AccountUsersEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `users`)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get(): IUser`)\n  }\n}\n\nexport class AccountUserEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint, userId: string) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `users`, userId)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n\nexport class AccountEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, accountId: string) {\n    super(session, basePath, sdkBasePath, 'accounts', accountId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IAccount): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  apiKeys(): AccountApiKeysEndpoint {\n    return new AccountApiKeysEndpoint(this)\n  }\n\n  invitations(): AccountInvitationsEndpoint {\n    return new AccountInvitationsEndpoint(this)\n  }\n\n  projects(): AccountProjectsEndpoint {\n    return new AccountProjectsEndpoint(this)\n  }\n\n  project(projectId: string): AccountProjectEndpoint {\n    return new AccountProjectEndpoint(this, projectId)\n  }\n\n  users(): AccountUsersEndpoint {\n    return new AccountUsersEndpoint(this)\n  }\n\n  user(userId: string): AccountUserEndpoint {\n    return new AccountUserEndpoint(this, userId)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get(): IAccount`)\n    acc.push(`${this.getSdkPath()}.update(properties: IAccount): Object`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n    this.apiKeys().describeSdkEndpoints(acc)\n    this.invitations().describeSdkEndpoints(acc)\n    this.projects().describeSdkEndpoints(acc)\n    this.project('{projectId}').describeSdkEndpoints(acc)\n    this.users().describeSdkEndpoints(acc)\n    this.user('{userId}').describeSdkEndpoints(acc)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IApiKey} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class ApiKeyEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, apiKeyId: string) {\n    super(session, basePath, sdkBasePath, 'apikeys', apiKeyId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IApiKey): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async resetSecret(): Promise<any> {\n    return this.request.patch(`${this.getPath()}/secret`, {}, {})\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IApiKey)`)\n    acc.push(`${this.getSdkPath()}.resetSecret()`)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {\n  IAsset,\n  IContact,\n  IQrCode,\n  QrCodeLocatorKeyType,\n} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\nimport {IQueryStringParameters as IGetScansQueryStringParameters} from './entities/get_scans_by_asset_id.query_string_parameters'\nimport {IResponseBody as IGetScansResponseBody} from './entities/get_scans_by_asset_id.response_body'\nimport {IQueryStringParameters as IGetContactsQueryStringParameters} from './entities/get_contacts_by_asset_id.query_string_parameters'\nimport {IResponseBody as IGetContactsResponseBody} from './entities/get_contacts_by_asset_id.response_body'\nimport {IResponseBody as ILinkContactResponseBody} from './entities/link_contact_to_asset.response_body'\n\nexport class AssetContactsEndpoint extends Endpoint {\n  constructor(asset: AssetEndpoint) {\n    super(asset.getSession(), asset.getPath(), asset.getSdkPath(), 'contacts')\n  }\n\n  async create(contact: IContact): Promise<any> {\n    return this.request.post(this.getPath(), {}, contact)\n  }\n\n  async get(queryParemeters: IGetContactsQueryStringParameters): Promise<IGetContactsResponseBody> {\n    return this.request.getList(this.getPath(), queryParemeters)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(contact: IContact): Promise<any>`)\n    acc.push(`${this.getSdkPath()}.get(queryParemeters: IGetContactsQueryStringParameters): Promise<IGetContactsResponseBody>`)\n  }\n}\n\nexport class AssetContactEndpoint extends Endpoint {\n  constructor(asset: AssetEndpoint, contactId: string) {\n    super(asset.getSession(), asset.getPath(), asset.getSdkPath(), 'contacts', contactId)\n  }\n\n  async link(type: string): Promise<ILinkContactResponseBody> {\n    return this.request.post(this.getPath(), {}, {type})\n  }\n\n  async unlink(): Promise<boolean> {\n    return this.request.delete(this.getPath(), {}, {})\n    return true\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.link(type: string)`)\n    acc.push(`${this.getSdkPath()}.unlink()`)\n    acc.push(`${this.getSdkPath()}.get(): any`)\n  }\n}\n\nexport class AssetScansEndpoint extends Endpoint {\n  constructor(asset: AssetEndpoint) {\n    super(asset.getSession(), asset.getPath(), asset.getSdkPath(), 'scans')\n  }\n\n  async get(queryParams: IGetScansQueryStringParameters): Promise<IGetScansResponseBody> {\n    return this.request.getList(this.getPath(), queryParams)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class AssetQrCodesEndpoint extends Endpoint {\n  constructor(asset: AssetEndpoint) {\n    super(asset.getSession(), asset.getPath(), asset.getSdkPath(), 'qrcodes')\n  }\n\n  async create(qrCode: IQrCode): Promise<any> {\n    if (!qrCode.locatorKeyType) {\n      // eslint-disable-next-line no-param-reassign\n      qrCode.locatorKeyType = QrCodeLocatorKeyType.SHORT_URL\n    }\n    return this.request.post(this.getPath(), {}, qrCode)\n  }\n\n  async get(params: any /* IQrOptions */): Promise<any> {\n    return this.request.get(this.getPath(), params)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class AssetEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, assetId: string) {\n    super(session, basePath, sdkBasePath, 'assets', assetId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IAsset): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  contacts(): AssetContactsEndpoint {\n    return new AssetContactsEndpoint(this)\n  }\n\n  contact(contactId: string): AssetContactEndpoint {\n    return new AssetContactEndpoint(this, contactId)\n  }\n\n  scans(): AssetScansEndpoint {\n    return new AssetScansEndpoint(this)\n  }\n\n  qrCodes(): AssetQrCodesEndpoint {\n    return new AssetQrCodesEndpoint(this)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IAsset)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n    this.contacts().describeSdkEndpoints(acc)\n    this.contact('{contactId}').describeSdkEndpoints(acc)\n    this.scans().describeSdkEndpoints(acc)\n    this.qrCodes().describeSdkEndpoints(acc)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IContact} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class ContactEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, contactId: string) {\n    super(session, basePath, sdkBasePath, 'contacts', contactId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IContact): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IContact)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class InvitationEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, invitationId: string) {\n    super(session, basePath, sdkBasePath, 'invitations', invitationId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {\n  IProject,\n  IAsset,\n  IContact,\n  IAccountInvitation,\n  IQrCode,\n  QrCodeLocatorKeyType,\n  // IQrOptions,\n} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n// import {IBatchAsset} from './entities/asset'\n// import {IBatchContact} from './entities/contact'\n\nexport class ProjectAssetsEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), 'assets')\n  }\n\n  async create(asset: IAsset): Promise<any> {\n    return this.request.post(this.getPath(), {}, asset)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class ProjectAssetsBatchEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), 'assets')\n  }\n\n  // @TODO: WHAT DOES BATCH RETURN?\n  async create(assets: /* IBatchAsset[] */ any): Promise<any> {\n    return this.request.postBatch(`${this.getPath()}/batch`, {}, {assets})\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create() /* batch */`)\n  }\n}\n\nexport class ProjectContactsEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `contacts`)\n  }\n\n  async create(contact: IContact): Promise<any> {\n    return this.request.post(this.getPath(), {}, contact)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class ProjectContactsBatchEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `contacts`)\n  }\n\n  // @TODO: WHAT DOES BATCH RETURN?\n  async create(contacts: /* IBatchContact[] */ any): Promise<any> {\n    return this.request.postBatch(`${this.getPath()}/batch`, {}, {contacts})\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create() /* batch */`)\n  }\n}\n\nexport class ProjectInvitationsEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `invitations`)\n  }\n\n  async create(invitation: IAccountInvitation): Promise<any> {\n    return this.request.post(this.getPath(), {}, invitation)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class ProjectUsersEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `users`)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class ProjectUserEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint, userId: string) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `users`, userId)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n\nexport class ProjectQrCodesEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), 'qrcodes')\n  }\n\n  async create(qrCode: IQrCode): Promise<any> {\n    if (!qrCode.locatorKeyType) {\n      // eslint-disable-next-line no-param-reassign\n      qrCode.locatorKeyType = QrCodeLocatorKeyType.SHORT_URL\n    }\n    return this.request.post(this.getPath(), {}, qrCode)\n  }\n\n  async get(params: any /* IQrOptions */): Promise<any> {\n    return this.request.get(this.getPath(), params)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    // acc.push(`${this.getSdkPath()}.get()`) NOT IMPLEMENTED\n  }\n}\n\nexport class ProjectEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, projectId: string) {\n    super(session, basePath, sdkBasePath, 'projects', projectId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IProject): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  assets(): ProjectAssetsEndpoint {\n    return new ProjectAssetsEndpoint(this)\n  }\n\n  assetsBatch(): ProjectAssetsBatchEndpoint {\n    return new ProjectAssetsBatchEndpoint(this)\n  }\n\n  contacts(): ProjectContactsEndpoint {\n    return new ProjectContactsEndpoint(this)\n  }\n\n  contactsBatch(): ProjectContactsBatchEndpoint {\n    return new ProjectContactsBatchEndpoint(this)\n  }\n\n  users(): ProjectUsersEndpoint {\n    return new ProjectUsersEndpoint(this)\n  }\n\n  user(userId: string): ProjectUserEndpoint {\n    return new ProjectUserEndpoint(this, userId)\n  }\n\n  qrCodes(): ProjectQrCodesEndpoint {\n    return new ProjectQrCodesEndpoint(this)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IProject)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n    this.assets().describeSdkEndpoints(acc)\n    this.assetsBatch().describeSdkEndpoints(acc)\n    this.contacts().describeSdkEndpoints(acc)\n    this.contactsBatch().describeSdkEndpoints(acc)\n    this.users().describeSdkEndpoints(acc)\n    this.user('{userId}').describeSdkEndpoints(acc)\n    this.qrCodes().describeSdkEndpoints(acc)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IContact, ISms} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class ScanContactEndpoint extends Endpoint {\n  constructor(scan: ScanEndpoint, contactId: string) {\n    super(scan.getSession(), scan.getPath(), scan.getSdkPath(), `contacts`, contactId)\n  }\n\n  async update(contact: IContact): Promise<any> {\n    return this.request.patch(this.getPath(), {}, contact)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.update(contact: IContact)`)\n  }\n}\n\nexport class ScanContactsEndpoint extends Endpoint {\n  constructor(scan: ScanEndpoint) {\n    super(scan.getSession(), scan.getPath(), scan.getSdkPath(), `contacts`)\n  }\n\n  async create(contact: IContact): Promise<any> {\n    return this.request.post(this.getPath(), {}, contact)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(contact: IContact)`)\n  }\n}\n\nexport class ScanSmssEndpoint extends Endpoint {\n  constructor(scan: ScanEndpoint) {\n    super(scan.getSession(), scan.getPath(), scan.getSdkPath(), `sms`)\n  }\n\n  async create(sms: ISms): Promise<any> {\n    return this.request.post(this.getPath(), {}, sms)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n  }\n}\n\nexport class ScanEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, scanId: string) {\n    super(session, basePath, sdkBasePath, 'scans', scanId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  contacts(): ScanContactsEndpoint {\n    return new ScanContactsEndpoint(this)\n  }\n\n  contact(contactId: string): ScanContactEndpoint {\n    return new ScanContactEndpoint(this, contactId)\n  }\n\n  smss(): ScanSmssEndpoint {\n    return new ScanSmssEndpoint(this)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    this.contacts().describeSdkEndpoints(acc)\n    this.contact('{contactId}').describeSdkEndpoints(acc)\n    this.smss().describeSdkEndpoints(acc)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IQrCode, IQrCodeOptions} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class QrCodeEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, qrCodeId: string) {\n    super(session, basePath, sdkBasePath, 'qrcodes', qrCodeId)\n  }\n\n  async get(params: IQrCodeOptions): Promise<any> {\n    return this.request.get(this.getPath(), params)\n  }\n\n  async update(properties: IQrCode): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IQrCode)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IAccount, IUser} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class UserAccountsEndpoint extends Endpoint {\n  constructor(user: UserEndpoint) {\n    super(user.getSession(), user.getPath(), user.getSdkPath(), 'accounts')\n  }\n\n  async create(properties: IAccount): Promise<any> {\n    return this.request.post(this.getPath(), {}, properties)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(properties: IAccount)`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class UserEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, userId: string) {\n    super(session, basePath, sdkBasePath, 'users', userId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IUser): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  accounts(): UserAccountsEndpoint {\n    return new UserAccountsEndpoint(this)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IUser)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n    this.accounts().describeSdkEndpoints(acc)\n  }\n}\n","import {promises as fs} from 'fs'\n// import path from 'path'\nimport moment from 'moment'\nimport {CognitoUserAsync} from './auth/cognito-user-async'\nimport {UserPool} from './auth/user-pool'\nimport {Request, getConfig} from './request'\nimport {ICloudConfig} from './cloud-config'\nimport {\n  IQrCode,\n} from './entities'\n\nimport {AccountEndpoint} from './accounts'\nimport {ApiKeyEndpoint} from './api-keys'\nimport {AssetEndpoint} from './assets'\nimport {ContactEndpoint} from './contacts'\nimport {InvitationEndpoint} from './invitations'\nimport {ProjectEndpoint} from './projects'\nimport {ScanEndpoint} from './scans'\nimport {QrCodeEndpoint} from './qrCodes'\nimport {UserEndpoint} from './users'\nimport {IOpenscreenSession} from './openscreen-session'\nimport {IConfig} from './config'\n\ntype RequestFactory = {\n  [name: string]: () => Request\n}\n\nconst ShowSdkBasePath: string = 'os'\n\nexport class Openscreen implements IOpenscreenSession {\n  protected _config?: IConfig\n  protected cloudConfigName?: string\n  protected cloudConfig?: Promise<ICloudConfig>\n  protected userPool?: UserPool\n  protected userId?: string\n  protected isAdministrator?: boolean\n  protected activeUser?: Promise<CognitoUserAsync>\n  protected requestFactory: RequestFactory = {}\n\n  getRequest(forEntity: string): Request {\n    return this.requestFactory[forEntity]()\n  }\n\n  static commonClient: Openscreen\n\n  static get client(): Openscreen {\n    if (!Openscreen.commonClient) {\n      Openscreen.commonClient = new Openscreen()\n    }\n    return Openscreen.commonClient\n  }\n\n  config(config: IConfig): Openscreen {\n    if (this._config) {\n      throw Error('Openscreen client is already configured')\n    }\n    if (!config.key) {\n      throw Error('Openscreen invalid config, API key is missing')\n    }\n    if (!config.secret) {\n      throw Error('Openscreen invalid config, secret is missing')\n    }\n    if (typeof config.environment === 'string') {\n      this.cloudConfigName = config.environment\n    } else if (typeof config.environment === 'object') {\n      this.cloudConfig = Promise.resolve(config.environment)\n    } else {\n      this.cloudConfigName = 'api-production'\n    }\n    // eslint-disable-next-line no-param-reassign\n    this._config = config\n    this.requestFactory.accounts = () => new Request(this)\n    this.requestFactory.apikeys = () => new Request(this)\n    this.requestFactory.assets = () => new Request(this)\n    this.requestFactory.assetsBatch = () => new Request(this)\n    this.requestFactory.contacts = () => new Request(this)\n    this.requestFactory.contactsBatch = () => new Request(this)\n    this.requestFactory.invitations = () => new Request(this)\n    this.requestFactory.projects = () => new Request(this)\n    this.requestFactory.qrcodes = () => new Request(this)\n    this.requestFactory.scans = () => new Request(this)\n    this.requestFactory.sms = () => new Request(this)\n    this.requestFactory.users = () => new Request(this)\n    return this\n  }\n\n  getConfig(): IConfig {\n    if (!this._config) {\n      throw Error('Openscreen client must be configured before accessing resources')\n    }\n    return this._config\n  }\n\n  async authorize(): Promise<CognitoUserAsync> {\n    const config = this.getConfig()\n    const cloudConfig = await this.getCloudConfig()\n    this.userPool = new UserPool(cloudConfig!.poolId, cloudConfig!.clientId, config.storage)\n    let user = this.userPool!.getUser(config.key!)\n    if (!user) {\n      user = await this.userPool!.authenticate(config.key!, config.secret!)\n    } else {\n      if (process.env.OS_DEBUG) console.info('Openscreen authorized user retrieved from cache')\n    }\n    delete config.key\n    delete config.secret\n    const session = await user!.getSession()\n    const idToken = session.getIdToken()\n    const idInfo = idToken.payload\n    this.userId = idInfo.sub\n    const groups = idInfo['cognito:groups']\n    this.isAdministrator = groups && groups.includes('appadmin')\n    if (idInfo.email) {\n      if (process.env.OS_DEBUG) console.info(\n        `Openscreen authorized as '${idInfo.email}' (userId: ${idInfo.sub}), session expires ${moment(\n          idToken.getExpiration() * 1000,\n        ).fromNow()}, authorized ${moment(idToken.getIssuedAt() * 1000).fromNow()}`,\n      )\n    } else {\n      if (process.env.OS_DEBUG) console.info(\n        `Openscreen authorized as userId: ${idInfo.sub}, session expires ${moment(\n          idToken.getExpiration() * 1000,\n        ).fromNow()}, authorized ${moment(idToken.getIssuedAt() * 1000).fromNow()}`,\n      )\n    }\n    return user!\n  }\n\n  async getCloudConfig(): Promise<ICloudConfig> {\n    if (!this.cloudConfig) {\n      if (!this.cloudConfigName) {\n        throw Error('Openscreen environment config missing')\n      }\n      this.cloudConfig = getConfig(this.cloudConfigName)\n    }\n    return this.cloudConfig\n  }\n\n  async getActiveUser(): Promise<CognitoUserAsync> {\n    if (!this.activeUser) {\n      this.activeUser = this.authorize()\n    }\n    return this.activeUser!\n  }\n\n  async authorizedUserId(): Promise<string> {\n    await this.getActiveUser()\n    return this.userId || ''\n  }\n\n  async amIAdministrator(): Promise<boolean> {\n    await this.getActiveUser()\n    return this.isAdministrator === true\n  }\n\n  account(accountId: string): AccountEndpoint {\n    return new AccountEndpoint(this, '', ShowSdkBasePath, accountId)\n  }\n\n  apiKey(apiKeyId: string): ApiKeyEndpoint {\n    return new ApiKeyEndpoint(this, '', ShowSdkBasePath, apiKeyId)\n  }\n\n  asset(assetId: string): AssetEndpoint {\n    return new AssetEndpoint(this, '', ShowSdkBasePath, assetId)\n  }\n\n  contact(contactId: string): ContactEndpoint {\n    return new ContactEndpoint(this, '', ShowSdkBasePath, contactId)\n  }\n\n  invitation(invitationId: string): InvitationEndpoint {\n    return new InvitationEndpoint(this, '', ShowSdkBasePath, invitationId)\n  }\n\n  project(projectId: string): ProjectEndpoint {\n    return new ProjectEndpoint(this, '', ShowSdkBasePath, projectId)\n  }\n\n  scan(scanId: string): ScanEndpoint {\n    return new ScanEndpoint(this, '', ShowSdkBasePath, scanId)\n  }\n\n  qrCode(qrCodeId: string): QrCodeEndpoint {\n    return new QrCodeEndpoint(this, '', ShowSdkBasePath, qrCodeId)\n  }\n\n  user(userId: string): UserEndpoint {\n    return new UserEndpoint(this, '', ShowSdkBasePath, userId)\n  }\n\n  describeSdkEndpoints(): string[] {\n    const acc: string[] = []\n    this.account('{accountId}').describeSdkEndpoints(acc)\n    this.apiKey('{apiKeyId}').describeSdkEndpoints(acc)\n    this.asset('{assetId}').describeSdkEndpoints(acc)\n    this.contact('{contactid}').describeSdkEndpoints(acc)\n    this.invitation('{invitationId}').describeSdkEndpoints(acc)\n    this.project('{projectId}').describeSdkEndpoints(acc)\n    this.scan('{scanId}').describeSdkEndpoints(acc)\n    this.qrCode('{qrCodeId}').describeSdkEndpoints(acc)\n    this.user('{userId}').describeSdkEndpoints(acc)\n    return acc.sort();\n  }\n\n  // UTILITIES\n  // @TODO: IF WE HAD AN OO MODEL THIS WOULD ME A METHOD ON QRCODE\n\n  // eslint-disable-next-line class-methods-use-this\n  async saveQrImageDataToFile(qrCode: IQrCode, path: string) {\n    if (!qrCode.image?.data) {\n      throw new Error(`No image data present for QR code, qrCodeId='${qrCode.qrCodeId || ''}'`)\n    }\n    let binaryData: string\n    if (qrCode.image?.options?.dataUrl) {\n      binaryData = Buffer.from(qrCode.image!.data!.replace(/^data:image\\/\\w+;base64,/, ''), 'base64').toString('binary');\n    } else {\n      binaryData = Buffer.from(qrCode.image!.data!, 'base64').toString('binary');\n    }\n    await fs.writeFile(path, binaryData, 'binary');\n  }\n}\n\n// eslint-disable-next-line no-multi-assign,@typescript-eslint/no-unused-vars\n// module.exports = exports = Openscreen\n"],"names":["AccountStatus","AccountUserRole","ProjectInvitationStatus","ProjectStatus","ProjectUserRole","QrCodeErrorCorrectionLevel","QrCodeIntentType","QrCodeLocatorKeyType","QrCodeStatus","QrCodeType","CognitoUserAsync","authenticateUser","authenticationDetails","Promise","resolve","reject","_CognitoUser","onSuccess","session","onFailure","err","mfaRequired","challengeName","challengeParameters","selectMFAType","mfaSetup","totpRequired","customChallenge","getSession","CognitoUser","CognitoUserPoolAsync","getStorage","storage","getClientId","clientId","signUp","username","password","userAttributes","validationData","_CognitoUserPool","result","CognitoUserPool","UserPool","userPoolId","userPool","this","UserPoolId","ClientId","Storage","getCognitoUserPool","getUser","key","getItem","Buffer","from","toString","Username","Pool","lastAuthUser","authenticate","secret","cognitoUser","_this2","AuthenticationDetails","Password","then","response","getUsername","setItem","email","attributes","attributeList","push","CognitoUserAttribute","Name","Value","givenName","middleName","familyName","phoneNumber","Request","axios","create","timeout","responseType","maxContentLength","maxBodyLength","maxRedirects","decompress","makeURL","path","getCloudConfig","cloudConfig","baseURL","parts","replace","forEach","segment","join","endpoint","getAuthorization","getActiveUser","user","Error","getAccessToken","getJwtToken","token","post","params","data","options","_this6","url","process","env","OS_DEBUG","console","debug","JSON","stringify","_this5$axios","headers","Authorization","postBatch","_this8","_this7$axios","get","_this10","_this9$axios","getList","_this12","_this11$axios","patch","_this14","_this16","Endpoint","basePath","sdkBasePath","entityName","id","request","sdkPath","getRequest","sdkEntityName","name","endsWith","substring","length","getPath","getSdkPath","describeSdkEndpoints","acc","AccountProjectsEndpoint","account","project","AccountProjectEndpoint","projectId","moveProjectToAccount","AccountApiKeysEndpoint","apiKey","AccountInvitationsEndpoint","invitation","AccountUsersEndpoint","AccountUserEndpoint","userId","AccountEndpoint","accountId","update","properties","apiKeys","invitations","projects","users","ApiKeyEndpoint","apiKeyId","resetSecret","AssetContactsEndpoint","asset","contact","queryParemeters","AssetContactEndpoint","contactId","link","type","unlink","AssetScansEndpoint","queryParams","AssetQrCodesEndpoint","qrCode","locatorKeyType","SHORT_URL","AssetEndpoint","assetId","contacts","scans","qrCodes","ContactEndpoint","InvitationEndpoint","invitationId","ProjectAssetsEndpoint","ProjectAssetsBatchEndpoint","assets","ProjectContactsEndpoint","ProjectContactsBatchEndpoint","ProjectUsersEndpoint","ProjectUserEndpoint","ProjectQrCodesEndpoint","ProjectEndpoint","assetsBatch","contactsBatch","ScanContactEndpoint","scan","ScanContactsEndpoint","ScanSmssEndpoint","sms","ScanEndpoint","scanId","smss","QrCodeEndpoint","qrCodeId","UserAccountsEndpoint","UserEndpoint","accounts","Openscreen","_config","cloudConfigName","isAdministrator","activeUser","requestFactory","forEntity","config","environment","_this","apikeys","qrcodes","getConfig","authorize","_this3","idToken","getIdToken","idInfo","payload","sub","groups","includes","info","moment","getExpiration","fromNow","getIssuedAt","poolId","_this5","stageAndAuth","thisAxios","message","_this7","authorizedUserId","_this9","amIAdministrator","_this11","sort","saveQrImageDataToFile","binaryData","image","_qrCode$image","_qrCode$image2","_qrCode$image2$option","dataUrl","fs","writeFile","commonClient"],"mappings":"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"}