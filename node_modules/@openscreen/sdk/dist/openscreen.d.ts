import { CognitoUserAsync } from './auth/cognito-user-async';
import { UserPool } from './auth/user-pool';
import { Request } from './request';
import { ICloudConfig } from './cloud-config';
import { IQrCode } from './entities';
import { AccountEndpoint } from './accounts';
import { ApiKeyEndpoint } from './api-keys';
import { AssetEndpoint } from './assets';
import { ContactEndpoint } from './contacts';
import { InvitationEndpoint } from './invitations';
import { ProjectEndpoint } from './projects';
import { ScanEndpoint } from './scans';
import { QrCodeEndpoint } from './qrCodes';
import { UserEndpoint } from './users';
import { IOpenscreenSession } from './openscreen-session';
import { IConfig } from './config';
declare type RequestFactory = {
    [name: string]: () => Request;
};
export declare class Openscreen implements IOpenscreenSession {
    protected _config?: IConfig;
    protected cloudConfigName?: string;
    protected cloudConfig?: Promise<ICloudConfig>;
    protected userPool?: UserPool;
    protected userId?: string;
    protected isAdministrator?: boolean;
    protected activeUser?: Promise<CognitoUserAsync>;
    protected requestFactory: RequestFactory;
    getRequest(forEntity: string): Request;
    static commonClient: Openscreen;
    static get client(): Openscreen;
    config(config: IConfig): Openscreen;
    getConfig(): IConfig;
    authorize(): Promise<CognitoUserAsync>;
    getCloudConfig(): Promise<ICloudConfig>;
    getActiveUser(): Promise<CognitoUserAsync>;
    authorizedUserId(): Promise<string>;
    amIAdministrator(): Promise<boolean>;
    account(accountId: string): AccountEndpoint;
    apiKey(apiKeyId: string): ApiKeyEndpoint;
    asset(assetId: string): AssetEndpoint;
    contact(contactId: string): ContactEndpoint;
    invitation(invitationId: string): InvitationEndpoint;
    project(projectId: string): ProjectEndpoint;
    scan(scanId: string): ScanEndpoint;
    qrCode(qrCodeId: string): QrCodeEndpoint;
    user(userId: string): UserEndpoint;
    describeSdkEndpoints(): string[];
    saveQrImageDataToFile(qrCode: IQrCode, path: string): Promise<void>;
}
export {};
//# sourceMappingURL=openscreen.d.ts.map