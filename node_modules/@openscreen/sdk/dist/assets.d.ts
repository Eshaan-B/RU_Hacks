import { Endpoint } from './endpoint';
import { IAsset, IContact, IQrCode } from './entities';
import { IOpenscreenSession } from './openscreen-session';
import { IQueryStringParameters as IGetScansQueryStringParameters } from './entities/get_scans_by_asset_id.query_string_parameters';
import { IResponseBody as IGetScansResponseBody } from './entities/get_scans_by_asset_id.response_body';
import { IQueryStringParameters as IGetContactsQueryStringParameters } from './entities/get_contacts_by_asset_id.query_string_parameters';
import { IResponseBody as IGetContactsResponseBody } from './entities/get_contacts_by_asset_id.response_body';
import { IResponseBody as ILinkContactResponseBody } from './entities/link_contact_to_asset.response_body';
export declare class AssetContactsEndpoint extends Endpoint {
    constructor(asset: AssetEndpoint);
    create(contact: IContact): Promise<any>;
    get(queryParemeters: IGetContactsQueryStringParameters): Promise<IGetContactsResponseBody>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class AssetContactEndpoint extends Endpoint {
    constructor(asset: AssetEndpoint, contactId: string);
    link(type: string): Promise<ILinkContactResponseBody>;
    unlink(): Promise<boolean>;
    get(): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class AssetScansEndpoint extends Endpoint {
    constructor(asset: AssetEndpoint);
    get(queryParams: IGetScansQueryStringParameters): Promise<IGetScansResponseBody>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class AssetQrCodesEndpoint extends Endpoint {
    constructor(asset: AssetEndpoint);
    create(qrCode: IQrCode): Promise<any>;
    get(params: any): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class AssetEndpoint extends Endpoint {
    constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, assetId: string);
    get(): Promise<any>;
    update(properties: IAsset): Promise<any>;
    delete(): Promise<boolean>;
    contacts(): AssetContactsEndpoint;
    contact(contactId: string): AssetContactEndpoint;
    scans(): AssetScansEndpoint;
    qrCodes(): AssetQrCodesEndpoint;
    describeSdkEndpoints(acc: string[]): void;
}
//# sourceMappingURL=assets.d.ts.map