{"version":3,"file":"index.esm.mjs","sources":["../src/auth/cognito-user-async.ts","../src/auth/cognito-user-pool-async.ts","../src/auth/user-pool.ts","../src/request.ts","../src/utils.ts","../src/endpoint.ts","../src/accounts.ts","../src/api-keys.ts","../src/entities/account_status.ts","../src/entities/account_user_role.ts","../src/entities/project_invitation_status.ts","../src/entities/project_status.ts","../src/entities/project_user_role.ts","../src/entities/qr_code_error_correction_level.ts","../src/entities/qr_code_intent_type.ts","../src/entities/qr_code_locator_key_type.ts","../src/entities/qr_code_status.ts","../src/entities/qr_code_type.ts","../src/assets.ts","../src/contacts.ts","../src/invitations.ts","../src/projects.ts","../src/scans.ts","../src/qrCodes.ts","../src/users.ts","../src/openscreen.ts"],"sourcesContent":["import {CognitoUser, AuthenticationDetails, CognitoUserSession} from 'amazon-cognito-identity-js'\n\nexport interface AuthenticateResponse {\n  session?: CognitoUserSession\n  challengeName?: String\n  challengeParameters?: Object\n}\n\nexport class CognitoUserAsync extends CognitoUser {\n  async authenticateUser(authenticationDetails: AuthenticationDetails) {\n    return new Promise<AuthenticateResponse>((resolve, reject) => {\n      super.authenticateUser(authenticationDetails, {\n        onSuccess: (session: CognitoUserSession) => resolve({session}),\n        onFailure: (err: Error) => reject(err),\n        mfaRequired: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        selectMFAType: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        mfaSetup: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        totpRequired: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        customChallenge: (challengeParameters: Object) => resolve({challengeParameters}),\n      })\n    })\n  }\n\n  async getSession() {\n    return new Promise<CognitoUserSession>((resolve, reject) => {\n      super.getSession((err: any, session: CognitoUserSession) => {\n        if (err) return reject(err)\n        return resolve(session)\n      })\n    })\n  }\n}\n","import {CognitoUserPool, CognitoUserAttribute, ISignUpResult} from 'amazon-cognito-identity-js'\nimport {IAuthStorage} from './auth-storage'\n\nexport class CognitoUserPoolAsync extends CognitoUserPool {\n  getStorage(): IAuthStorage {\n    return (this as any).storage\n  }\n\n  getClientId(): string {\n    return (this as any).clientId\n  }\n\n  async signUp(\n    username: string,\n    password: string,\n    userAttributes: CognitoUserAttribute[],\n    validationData: CognitoUserAttribute[],\n  ) {\n    return new Promise<ISignUpResult>((resolve, reject) => {\n      super.signUp(username, password, userAttributes, validationData, (err?: Error, result?: ISignUpResult) => {\n        if (err) return reject(err)\n        return resolve(result!)\n      })\n    })\n  }\n}\n","import {AuthenticationDetails, CognitoUserAttribute} from 'amazon-cognito-identity-js'\nimport {CognitoUserAsync} from './cognito-user-async'\nimport {CognitoUserPoolAsync} from './cognito-user-pool-async'\nimport {IAuthStorage} from './auth-storage'\n\nexport class UserPool {\n  userPool: CognitoUserPoolAsync\n\n  constructor(userPoolId: string, clientId: string, storage?: IAuthStorage) {\n    this.userPool = new CognitoUserPoolAsync({\n      UserPoolId: userPoolId,\n      ClientId: clientId,\n      Storage: storage,\n    })\n  }\n\n  getCognitoUserPool(): CognitoUserPoolAsync {\n    return this.userPool\n  }\n\n  getStorage(): IAuthStorage {\n    return this.userPool.getStorage()\n  }\n\n  getUser(key: string): CognitoUserAsync | null {\n    if (key) {\n      const username = this.userPool.getStorage().getItem(`keyToUsername.${Buffer.from(key).toString('base64')}`)\n      if (username) {\n        return new CognitoUserAsync({\n          Username: username,\n          Pool: this.userPool,\n          Storage: this.userPool.getStorage(),\n        })\n      }\n      return null\n    }\n    const lastAuthUser = this.userPool\n      .getStorage()\n      .getItem(`CognitoIdentityServiceProvider.${this.userPool.getClientId()}.LastAuthUser`)\n    if (lastAuthUser) {\n      return new CognitoUserAsync({\n        Username: lastAuthUser,\n        Pool: this.userPool,\n        Storage: this.userPool.getStorage(),\n      })\n    }\n    return null\n  }\n\n  async authenticate(key: string, secret: string) {\n    const cognitoUser = new CognitoUserAsync({\n      Username: key,\n      Pool: this.userPool,\n      Storage: this.userPool.getStorage(),\n    })\n    const authenticationDetails = new AuthenticationDetails({\n      Username: key,\n      Password: secret,\n    })\n    return cognitoUser.authenticateUser(authenticationDetails).then((response) => {\n      if (response.session) {\n        const username = cognitoUser.getUsername()\n        this.userPool.getStorage().setItem(`keyToUsername.${Buffer.from(key).toString('base64')}`, username)\n        return cognitoUser\n      }\n      return null\n    })\n  }\n\n  async signUp(email: string, password: string, attributes: any) {\n    const attributeList: CognitoUserAttribute[] = []\n    attributeList.push(new CognitoUserAttribute({Name: 'given_name', Value: attributes.givenName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'middle_name', Value: attributes.middleName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'family_name', Value: attributes.familyName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'phone_number', Value: attributes.phoneNumber}))\n    attributeList.push(new CognitoUserAttribute({Name: 'email', Value: email}))\n    return this.userPool.signUp(email, password, attributeList, [])\n  }\n}\n","/* eslint-disable no-console */\nimport axios, {AxiosInstance, AxiosResponse} from 'axios'\nimport {makeURL} from './utils'\nimport {ICloudConfig} from './cloud-config'\n// eslint-disable-next-line import/no-cycle\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class Request {\n  session: IOpenscreenSession\n  axios: AxiosInstance\n\n  constructor(session: IOpenscreenSession) {\n    this.session = session\n    this.axios = axios.create({\n      timeout: 10000,\n      responseType: 'json',\n      maxContentLength: 50000,\n      maxBodyLength: 50000,\n      maxRedirects: 1,\n      decompress: true,\n    })\n  }\n\n  async makeURL(path: string): Promise<string> {\n    const cloudConfig = await this.session.getCloudConfig()\n    return makeURL(cloudConfig.endpoint, path)\n  }\n\n  async getAuthorization(): Promise<string> {\n    const user = await this.session.getActiveUser()\n    const session = await user.getSession()\n    if (!session) throw Error('Openscreen No session available')\n    const token = await session.getAccessToken().getJwtToken()\n    return `Bearer ${token}`\n  }\n\n  async post(path: string, params: Object = {}, data: Object = {}, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`POST ${url}`)\n      console.debug(JSON.stringify(data, null, 2))\n    }\n    const response = await this.axios.post(url, data, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async postBatch(path: string, params: Object = {}, data: Object, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`POST ${url}`)\n      console.debug(JSON.stringify(data, null, 2))\n    }\n    const response = await this.axios.post(url, data, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async get(path: string, params: Object = {}, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`GET ${url}`)\n    }\n    const response = await this.axios.get(url, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async getList(path: string, params: Object = {}, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`GET ${url}`)\n    }\n    const response = await this.axios.get(url, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async patch(path: string, params: Object = {}, data: Object = {}, options: Object = {}): Promise<any> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`PATCH ${url}`)\n      console.debug(JSON.stringify(data, null, 2))\n    }\n    const response = await axios.patch(url, data, {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      data,\n      ...options,\n    })\n    if (process.env.OS_DEBUG) {\n      console.debug('RESPONSE', JSON.stringify(response.data, null, 2))\n    }\n    return response.data\n  }\n\n  async delete(path: string, params: Object = {}, options: Object = {}): Promise<boolean> {\n    const url = await this.makeURL(path)\n    if (process.env.OS_DEBUG) {\n      console.debug(`DELETE ${url}`)\n    }\n    await axios.delete(await this.makeURL(path), {\n      headers: {Authorization: await this.getAuthorization()},\n      params,\n      ...options,\n    })\n    return true\n  }\n}\n\nexport async function getConfig(stageAndAuth: string): Promise<ICloudConfig> {\n  const thisAxios = axios.create({\n    baseURL: 'https://config.openscreen.com',\n    timeout: 10000,\n    responseType: 'json',\n    maxContentLength: 50000,\n    maxBodyLength: 50000,\n    maxRedirects: 1,\n    decompress: true,\n  })\n  return thisAxios\n    .get(`${stageAndAuth}.json`)\n    .then((response: AxiosResponse) => response.data)\n    .catch((err: {message: any}) => {\n      throw new Error(`Unable to load configuration '${stageAndAuth}': ${err.message}`)\n    })\n}\n","// export function makeURL(baseURL: string, urlPath: string) {\n//     return `${baseURL.replace(/\\/+$/, '')  }/${  urlPath.replace(/^\\/+/, '')}`\n// }\n//\nexport function makeURL(baseURL: string, ...pathSegments: string[]) {\n  const parts: string[] = [baseURL.replace(/\\/+$/, '')]\n  pathSegments.forEach((segment) => {\n    if (segment && segment !== '') {\n      parts.push(segment.replace(/^\\/+/, ''))\n    }\n  })\n  return parts.join('/')\n}\n","import {Request} from './request'\nimport {IOpenscreenSession} from './openscreen-session'\n\nfunction singularOf(name: string): string {\n  if (name.endsWith('s')) return name.substring(0, name.length - 1)\n  return name\n}\n\nexport class Endpoint {\n  protected session: IOpenscreenSession\n  protected request: Request\n  protected id?: string\n  protected path: string\n  protected sdkPath: string\n\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, entityName: string, id?: string) {\n    this.session = session\n    this.request = session.getRequest(entityName) as Request\n    this.id = id\n    if (id) {\n      this.path = `${basePath}/${entityName}/${id}`\n    } else {\n      this.path = `${basePath}/${entityName}`\n    }\n    if (id) {\n      const sdkEntityName = singularOf(entityName)\n      this.sdkPath = `${sdkBasePath}.${sdkEntityName}(${sdkEntityName}Id)`\n    } else {\n      this.sdkPath = `${sdkBasePath}.${entityName}()`\n    }\n  }\n\n  getSession(): IOpenscreenSession {\n    return this.session\n  }\n\n  getPath(): string {\n    return this.path\n  }\n\n  getSdkPath(): string {\n    return this.sdkPath!\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(this.getSdkPath())\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {\n  IAccount,\n  IApiKey,\n  IAccountInvitation,\n  IProject,\n} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class AccountProjectsEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `projects`)\n  }\n\n  async create(project: IProject): Promise<IProject> {\n    return this.request.post(this.getPath(), {}, project)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(project: IProject)`)\n    acc.push(`${this.getSdkPath()}.get(): IProject`)\n  }\n}\n\nexport class AccountProjectEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint, projectId: string) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `projects`, projectId)\n  }\n\n  async moveProjectToAccount(): Promise<boolean> {\n    await this.request.post(this.getPath(), {}, {})\n    return true\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.moveProjectToAccount()`)\n  }\n}\n\nexport class AccountApiKeysEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `apikeys`)\n  }\n\n  async create(apiKey: IApiKey): Promise<any> {\n    return this.request.post(this.getPath(), {}, apiKey)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(apiKey: IApiKey)`)\n    acc.push(`${this.getSdkPath()}.get(): IApiKey`)\n  }\n}\n\nexport class AccountInvitationsEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `invitations`)\n  }\n\n  async create(invitation: IAccountInvitation): Promise<any> {\n    return this.request.post(this.getPath(), {}, invitation)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(invitation: IAccountInvitation)`)\n    acc.push(`${this.getSdkPath()}.get(): IAccountInvitation`)\n  }\n}\n\nexport class AccountUsersEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `users`)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get(): IUser`)\n  }\n}\n\nexport class AccountUserEndpoint extends Endpoint {\n  constructor(account: AccountEndpoint, userId: string) {\n    super(account.getSession(), account.getPath(), account.getSdkPath(), `users`, userId)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n\nexport class AccountEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, accountId: string) {\n    super(session, basePath, sdkBasePath, 'accounts', accountId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IAccount): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  apiKeys(): AccountApiKeysEndpoint {\n    return new AccountApiKeysEndpoint(this)\n  }\n\n  invitations(): AccountInvitationsEndpoint {\n    return new AccountInvitationsEndpoint(this)\n  }\n\n  projects(): AccountProjectsEndpoint {\n    return new AccountProjectsEndpoint(this)\n  }\n\n  project(projectId: string): AccountProjectEndpoint {\n    return new AccountProjectEndpoint(this, projectId)\n  }\n\n  users(): AccountUsersEndpoint {\n    return new AccountUsersEndpoint(this)\n  }\n\n  user(userId: string): AccountUserEndpoint {\n    return new AccountUserEndpoint(this, userId)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get(): IAccount`)\n    acc.push(`${this.getSdkPath()}.update(properties: IAccount): Object`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n    this.apiKeys().describeSdkEndpoints(acc)\n    this.invitations().describeSdkEndpoints(acc)\n    this.projects().describeSdkEndpoints(acc)\n    this.project('{projectId}').describeSdkEndpoints(acc)\n    this.users().describeSdkEndpoints(acc)\n    this.user('{userId}').describeSdkEndpoints(acc)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IApiKey} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class ApiKeyEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, apiKeyId: string) {\n    super(session, basePath, sdkBasePath, 'apikeys', apiKeyId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IApiKey): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async resetSecret(): Promise<any> {\n    return this.request.patch(`${this.getPath()}/secret`, {}, {})\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IApiKey)`)\n    acc.push(`${this.getSdkPath()}.resetSecret()`)\n  }\n}\n","//// AccountStatus\n\nexport enum AccountStatus {\n    ACTIVE = 'ACTIVE',\n    SUSPENDED = 'SUSPENDED',\n}","//// AccountUserRole\n\nexport enum AccountUserRole {\n    OWNER = 'OWNER',\n    ADMINISTRATOR = 'ADMINISTRATOR',\n    BILLING_CONTACT = 'BILLING_CONTACT',\n    MEMBER = 'MEMBER',\n    API_KEY = 'API-KEY',\n    INVITATION_DECLINED = 'INVITATION_DECLINED',\n}","//// ProjectInvitationStatus\n\nexport enum ProjectInvitationStatus {\n    ACCEPTED = 'ACCEPTED',\n    PENDING = 'PENDING',\n    EXPIRED = 'EXPIRED',\n}","//// ProjectStatus\n\nexport enum ProjectStatus {\n    ACTIVE = 'ACTIVE',\n    SUSPENDED = 'SUSPENDED',\n}","//// ProjectUserRole\n\nexport enum ProjectUserRole {\n    OWNER = 'OWNER',\n    ADMINISTRATOR = 'ADMINISTRATOR',\n    BILLING_CONTACT = 'BILLING_CONTACT',\n    MEMBER = 'MEMBER',\n    API_KEY = 'API_KEY',\n}","//// QrCodeErrorCorrectionLevel\n\nexport enum QrCodeErrorCorrectionLevel {\n    L = 'L',\n    M = 'M',\n    Q = 'Q',\n    H = 'H',\n}","//// QrCodeIntentType\n\nexport enum QrCodeIntentType {\n    STATIC_REDIRECT = 'STATIC_REDIRECT',\n    DYNAMIC_REDIRECT = 'DYNAMIC_REDIRECT',\n    DYNAMIC_REDIRECT_TO_APP = 'DYNAMIC_REDIRECT_TO_APP',\n}","//// QrCodeLocatorKeyType\n\nexport enum QrCodeLocatorKeyType {\n    SHORT_URL = 'SHORT_URL',\n    HASHED_ID = 'HASHED_ID',\n    SECURE_ID = 'SECURE_ID',\n}","//// QrCodeStatus\n\nexport enum QrCodeStatus {\n    ACTIVE = 'ACTIVE',\n    SUSPENDED = 'SUSPENDED',\n}","//// QrCodeType\n\nexport enum QrCodeType {\n    PNG = 'png',\n    SVG = 'svg',\n}","import {Endpoint} from './endpoint'\nimport {\n  IAsset,\n  IContact,\n  IQrCode,\n  QrCodeLocatorKeyType,\n} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\nimport {IQueryStringParameters as IGetScansQueryStringParameters} from './entities/get_scans_by_asset_id.query_string_parameters'\nimport {IResponseBody as IGetScansResponseBody} from './entities/get_scans_by_asset_id.response_body'\nimport {IQueryStringParameters as IGetContactsQueryStringParameters} from './entities/get_contacts_by_asset_id.query_string_parameters'\nimport {IResponseBody as IGetContactsResponseBody} from './entities/get_contacts_by_asset_id.response_body'\nimport {IResponseBody as ILinkContactResponseBody} from './entities/link_contact_to_asset.response_body'\n\nexport class AssetContactsEndpoint extends Endpoint {\n  constructor(asset: AssetEndpoint) {\n    super(asset.getSession(), asset.getPath(), asset.getSdkPath(), 'contacts')\n  }\n\n  async create(contact: IContact): Promise<any> {\n    return this.request.post(this.getPath(), {}, contact)\n  }\n\n  async get(queryParemeters: IGetContactsQueryStringParameters): Promise<IGetContactsResponseBody> {\n    return this.request.getList(this.getPath(), queryParemeters)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(contact: IContact): Promise<any>`)\n    acc.push(`${this.getSdkPath()}.get(queryParemeters: IGetContactsQueryStringParameters): Promise<IGetContactsResponseBody>`)\n  }\n}\n\nexport class AssetContactEndpoint extends Endpoint {\n  constructor(asset: AssetEndpoint, contactId: string) {\n    super(asset.getSession(), asset.getPath(), asset.getSdkPath(), 'contacts', contactId)\n  }\n\n  async link(type: string): Promise<ILinkContactResponseBody> {\n    return this.request.post(this.getPath(), {}, {type})\n  }\n\n  async unlink(): Promise<boolean> {\n    return this.request.delete(this.getPath(), {}, {})\n    return true\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.link(type: string)`)\n    acc.push(`${this.getSdkPath()}.unlink()`)\n    acc.push(`${this.getSdkPath()}.get(): any`)\n  }\n}\n\nexport class AssetScansEndpoint extends Endpoint {\n  constructor(asset: AssetEndpoint) {\n    super(asset.getSession(), asset.getPath(), asset.getSdkPath(), 'scans')\n  }\n\n  async get(queryParams: IGetScansQueryStringParameters): Promise<IGetScansResponseBody> {\n    return this.request.getList(this.getPath(), queryParams)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class AssetQrCodesEndpoint extends Endpoint {\n  constructor(asset: AssetEndpoint) {\n    super(asset.getSession(), asset.getPath(), asset.getSdkPath(), 'qrcodes')\n  }\n\n  async create(qrCode: IQrCode): Promise<any> {\n    if (!qrCode.locatorKeyType) {\n      // eslint-disable-next-line no-param-reassign\n      qrCode.locatorKeyType = QrCodeLocatorKeyType.SHORT_URL\n    }\n    return this.request.post(this.getPath(), {}, qrCode)\n  }\n\n  async get(params: any /* IQrOptions */): Promise<any> {\n    return this.request.get(this.getPath(), params)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class AssetEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, assetId: string) {\n    super(session, basePath, sdkBasePath, 'assets', assetId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IAsset): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  contacts(): AssetContactsEndpoint {\n    return new AssetContactsEndpoint(this)\n  }\n\n  contact(contactId: string): AssetContactEndpoint {\n    return new AssetContactEndpoint(this, contactId)\n  }\n\n  scans(): AssetScansEndpoint {\n    return new AssetScansEndpoint(this)\n  }\n\n  qrCodes(): AssetQrCodesEndpoint {\n    return new AssetQrCodesEndpoint(this)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IAsset)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n    this.contacts().describeSdkEndpoints(acc)\n    this.contact('{contactId}').describeSdkEndpoints(acc)\n    this.scans().describeSdkEndpoints(acc)\n    this.qrCodes().describeSdkEndpoints(acc)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IContact} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class ContactEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, contactId: string) {\n    super(session, basePath, sdkBasePath, 'contacts', contactId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IContact): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IContact)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class InvitationEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, invitationId: string) {\n    super(session, basePath, sdkBasePath, 'invitations', invitationId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {\n  IProject,\n  IAsset,\n  IContact,\n  IAccountInvitation,\n  IQrCode,\n  QrCodeLocatorKeyType,\n  // IQrOptions,\n} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n// import {IBatchAsset} from './entities/asset'\n// import {IBatchContact} from './entities/contact'\n\nexport class ProjectAssetsEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), 'assets')\n  }\n\n  async create(asset: IAsset): Promise<any> {\n    return this.request.post(this.getPath(), {}, asset)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class ProjectAssetsBatchEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), 'assets')\n  }\n\n  // @TODO: WHAT DOES BATCH RETURN?\n  async create(assets: /* IBatchAsset[] */ any): Promise<any> {\n    return this.request.postBatch(`${this.getPath()}/batch`, {}, {assets})\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create() /* batch */`)\n  }\n}\n\nexport class ProjectContactsEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `contacts`)\n  }\n\n  async create(contact: IContact): Promise<any> {\n    return this.request.post(this.getPath(), {}, contact)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class ProjectContactsBatchEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `contacts`)\n  }\n\n  // @TODO: WHAT DOES BATCH RETURN?\n  async create(contacts: /* IBatchContact[] */ any): Promise<any> {\n    return this.request.postBatch(`${this.getPath()}/batch`, {}, {contacts})\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create() /* batch */`)\n  }\n}\n\nexport class ProjectInvitationsEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `invitations`)\n  }\n\n  async create(invitation: IAccountInvitation): Promise<any> {\n    return this.request.post(this.getPath(), {}, invitation)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class ProjectUsersEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `users`)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class ProjectUserEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint, userId: string) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), `users`, userId)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n\nexport class ProjectQrCodesEndpoint extends Endpoint {\n  constructor(project: ProjectEndpoint) {\n    super(project.getSession(), project.getPath(), project.getSdkPath(), 'qrcodes')\n  }\n\n  async create(qrCode: IQrCode): Promise<any> {\n    if (!qrCode.locatorKeyType) {\n      // eslint-disable-next-line no-param-reassign\n      qrCode.locatorKeyType = QrCodeLocatorKeyType.SHORT_URL\n    }\n    return this.request.post(this.getPath(), {}, qrCode)\n  }\n\n  async get(params: any /* IQrOptions */): Promise<any> {\n    return this.request.get(this.getPath(), params)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n    // acc.push(`${this.getSdkPath()}.get()`) NOT IMPLEMENTED\n  }\n}\n\nexport class ProjectEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, projectId: string) {\n    super(session, basePath, sdkBasePath, 'projects', projectId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IProject): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  assets(): ProjectAssetsEndpoint {\n    return new ProjectAssetsEndpoint(this)\n  }\n\n  assetsBatch(): ProjectAssetsBatchEndpoint {\n    return new ProjectAssetsBatchEndpoint(this)\n  }\n\n  contacts(): ProjectContactsEndpoint {\n    return new ProjectContactsEndpoint(this)\n  }\n\n  contactsBatch(): ProjectContactsBatchEndpoint {\n    return new ProjectContactsBatchEndpoint(this)\n  }\n\n  users(): ProjectUsersEndpoint {\n    return new ProjectUsersEndpoint(this)\n  }\n\n  user(userId: string): ProjectUserEndpoint {\n    return new ProjectUserEndpoint(this, userId)\n  }\n\n  qrCodes(): ProjectQrCodesEndpoint {\n    return new ProjectQrCodesEndpoint(this)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IProject)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n    this.assets().describeSdkEndpoints(acc)\n    this.assetsBatch().describeSdkEndpoints(acc)\n    this.contacts().describeSdkEndpoints(acc)\n    this.contactsBatch().describeSdkEndpoints(acc)\n    this.users().describeSdkEndpoints(acc)\n    this.user('{userId}').describeSdkEndpoints(acc)\n    this.qrCodes().describeSdkEndpoints(acc)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IContact, ISms} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class ScanContactEndpoint extends Endpoint {\n  constructor(scan: ScanEndpoint, contactId: string) {\n    super(scan.getSession(), scan.getPath(), scan.getSdkPath(), `contacts`, contactId)\n  }\n\n  async update(contact: IContact): Promise<any> {\n    return this.request.patch(this.getPath(), {}, contact)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.update(contact: IContact)`)\n  }\n}\n\nexport class ScanContactsEndpoint extends Endpoint {\n  constructor(scan: ScanEndpoint) {\n    super(scan.getSession(), scan.getPath(), scan.getSdkPath(), `contacts`)\n  }\n\n  async create(contact: IContact): Promise<any> {\n    return this.request.post(this.getPath(), {}, contact)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(contact: IContact)`)\n  }\n}\n\nexport class ScanSmssEndpoint extends Endpoint {\n  constructor(scan: ScanEndpoint) {\n    super(scan.getSession(), scan.getPath(), scan.getSdkPath(), `sms`)\n  }\n\n  async create(sms: ISms): Promise<any> {\n    return this.request.post(this.getPath(), {}, sms)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create()`)\n  }\n}\n\nexport class ScanEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, scanId: string) {\n    super(session, basePath, sdkBasePath, 'scans', scanId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  contacts(): ScanContactsEndpoint {\n    return new ScanContactsEndpoint(this)\n  }\n\n  contact(contactId: string): ScanContactEndpoint {\n    return new ScanContactEndpoint(this, contactId)\n  }\n\n  smss(): ScanSmssEndpoint {\n    return new ScanSmssEndpoint(this)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    this.contacts().describeSdkEndpoints(acc)\n    this.contact('{contactId}').describeSdkEndpoints(acc)\n    this.smss().describeSdkEndpoints(acc)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IQrCode, IQrCodeOptions} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class QrCodeEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, qrCodeId: string) {\n    super(session, basePath, sdkBasePath, 'qrcodes', qrCodeId)\n  }\n\n  async get(params: IQrCodeOptions): Promise<any> {\n    return this.request.get(this.getPath(), params)\n  }\n\n  async update(properties: IQrCode): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IQrCode)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n  }\n}\n","import {Endpoint} from './endpoint'\nimport {IAccount, IUser} from './entities'\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport class UserAccountsEndpoint extends Endpoint {\n  constructor(user: UserEndpoint) {\n    super(user.getSession(), user.getPath(), user.getSdkPath(), 'accounts')\n  }\n\n  async create(properties: IAccount): Promise<any> {\n    return this.request.post(this.getPath(), {}, properties)\n  }\n\n  async get(): Promise<any> {\n    return this.request.getList(this.getPath())\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.create(properties: IAccount)`)\n    acc.push(`${this.getSdkPath()}.get()`)\n  }\n}\n\nexport class UserEndpoint extends Endpoint {\n  constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, userId: string) {\n    super(session, basePath, sdkBasePath, 'users', userId)\n  }\n\n  async get(): Promise<any> {\n    return this.request.get(this.getPath())\n  }\n\n  async update(properties: IUser): Promise<any> {\n    return this.request.patch(this.getPath(), {}, properties)\n  }\n\n  async delete(): Promise<boolean> {\n    return this.request.delete(this.getPath())\n  }\n\n  accounts(): UserAccountsEndpoint {\n    return new UserAccountsEndpoint(this)\n  }\n\n  describeSdkEndpoints(acc: string[]) {\n    acc.push(`${this.getSdkPath()}.get()`)\n    acc.push(`${this.getSdkPath()}.update(properties: IUser)`)\n    acc.push(`${this.getSdkPath()}.delete()`)\n    this.accounts().describeSdkEndpoints(acc)\n  }\n}\n","import {promises as fs} from 'fs'\n// import path from 'path'\nimport moment from 'moment'\nimport {CognitoUserAsync} from './auth/cognito-user-async'\nimport {UserPool} from './auth/user-pool'\nimport {Request, getConfig} from './request'\nimport {ICloudConfig} from './cloud-config'\nimport {\n  IQrCode,\n} from './entities'\n\nimport {AccountEndpoint} from './accounts'\nimport {ApiKeyEndpoint} from './api-keys'\nimport {AssetEndpoint} from './assets'\nimport {ContactEndpoint} from './contacts'\nimport {InvitationEndpoint} from './invitations'\nimport {ProjectEndpoint} from './projects'\nimport {ScanEndpoint} from './scans'\nimport {QrCodeEndpoint} from './qrCodes'\nimport {UserEndpoint} from './users'\nimport {IOpenscreenSession} from './openscreen-session'\nimport {IConfig} from './config'\n\ntype RequestFactory = {\n  [name: string]: () => Request\n}\n\nconst ShowSdkBasePath: string = 'os'\n\nexport class Openscreen implements IOpenscreenSession {\n  protected _config?: IConfig\n  protected cloudConfigName?: string\n  protected cloudConfig?: Promise<ICloudConfig>\n  protected userPool?: UserPool\n  protected userId?: string\n  protected isAdministrator?: boolean\n  protected activeUser?: Promise<CognitoUserAsync>\n  protected requestFactory: RequestFactory = {}\n\n  getRequest(forEntity: string): Request {\n    return this.requestFactory[forEntity]()\n  }\n\n  static commonClient: Openscreen\n\n  static get client(): Openscreen {\n    if (!Openscreen.commonClient) {\n      Openscreen.commonClient = new Openscreen()\n    }\n    return Openscreen.commonClient\n  }\n\n  config(config: IConfig): Openscreen {\n    if (this._config) {\n      throw Error('Openscreen client is already configured')\n    }\n    if (!config.key) {\n      throw Error('Openscreen invalid config, API key is missing')\n    }\n    if (!config.secret) {\n      throw Error('Openscreen invalid config, secret is missing')\n    }\n    if (typeof config.environment === 'string') {\n      this.cloudConfigName = config.environment\n    } else if (typeof config.environment === 'object') {\n      this.cloudConfig = Promise.resolve(config.environment)\n    } else {\n      this.cloudConfigName = 'api-production'\n    }\n    // eslint-disable-next-line no-param-reassign\n    this._config = config\n    this.requestFactory.accounts = () => new Request(this)\n    this.requestFactory.apikeys = () => new Request(this)\n    this.requestFactory.assets = () => new Request(this)\n    this.requestFactory.assetsBatch = () => new Request(this)\n    this.requestFactory.contacts = () => new Request(this)\n    this.requestFactory.contactsBatch = () => new Request(this)\n    this.requestFactory.invitations = () => new Request(this)\n    this.requestFactory.projects = () => new Request(this)\n    this.requestFactory.qrcodes = () => new Request(this)\n    this.requestFactory.scans = () => new Request(this)\n    this.requestFactory.sms = () => new Request(this)\n    this.requestFactory.users = () => new Request(this)\n    return this\n  }\n\n  getConfig(): IConfig {\n    if (!this._config) {\n      throw Error('Openscreen client must be configured before accessing resources')\n    }\n    return this._config\n  }\n\n  async authorize(): Promise<CognitoUserAsync> {\n    const config = this.getConfig()\n    const cloudConfig = await this.getCloudConfig()\n    this.userPool = new UserPool(cloudConfig!.poolId, cloudConfig!.clientId, config.storage)\n    let user = this.userPool!.getUser(config.key!)\n    if (!user) {\n      user = await this.userPool!.authenticate(config.key!, config.secret!)\n    } else {\n      if (process.env.OS_DEBUG) console.info('Openscreen authorized user retrieved from cache')\n    }\n    delete config.key\n    delete config.secret\n    const session = await user!.getSession()\n    const idToken = session.getIdToken()\n    const idInfo = idToken.payload\n    this.userId = idInfo.sub\n    const groups = idInfo['cognito:groups']\n    this.isAdministrator = groups && groups.includes('appadmin')\n    if (idInfo.email) {\n      if (process.env.OS_DEBUG) console.info(\n        `Openscreen authorized as '${idInfo.email}' (userId: ${idInfo.sub}), session expires ${moment(\n          idToken.getExpiration() * 1000,\n        ).fromNow()}, authorized ${moment(idToken.getIssuedAt() * 1000).fromNow()}`,\n      )\n    } else {\n      if (process.env.OS_DEBUG) console.info(\n        `Openscreen authorized as userId: ${idInfo.sub}, session expires ${moment(\n          idToken.getExpiration() * 1000,\n        ).fromNow()}, authorized ${moment(idToken.getIssuedAt() * 1000).fromNow()}`,\n      )\n    }\n    return user!\n  }\n\n  async getCloudConfig(): Promise<ICloudConfig> {\n    if (!this.cloudConfig) {\n      if (!this.cloudConfigName) {\n        throw Error('Openscreen environment config missing')\n      }\n      this.cloudConfig = getConfig(this.cloudConfigName)\n    }\n    return this.cloudConfig\n  }\n\n  async getActiveUser(): Promise<CognitoUserAsync> {\n    if (!this.activeUser) {\n      this.activeUser = this.authorize()\n    }\n    return this.activeUser!\n  }\n\n  async authorizedUserId(): Promise<string> {\n    await this.getActiveUser()\n    return this.userId || ''\n  }\n\n  async amIAdministrator(): Promise<boolean> {\n    await this.getActiveUser()\n    return this.isAdministrator === true\n  }\n\n  account(accountId: string): AccountEndpoint {\n    return new AccountEndpoint(this, '', ShowSdkBasePath, accountId)\n  }\n\n  apiKey(apiKeyId: string): ApiKeyEndpoint {\n    return new ApiKeyEndpoint(this, '', ShowSdkBasePath, apiKeyId)\n  }\n\n  asset(assetId: string): AssetEndpoint {\n    return new AssetEndpoint(this, '', ShowSdkBasePath, assetId)\n  }\n\n  contact(contactId: string): ContactEndpoint {\n    return new ContactEndpoint(this, '', ShowSdkBasePath, contactId)\n  }\n\n  invitation(invitationId: string): InvitationEndpoint {\n    return new InvitationEndpoint(this, '', ShowSdkBasePath, invitationId)\n  }\n\n  project(projectId: string): ProjectEndpoint {\n    return new ProjectEndpoint(this, '', ShowSdkBasePath, projectId)\n  }\n\n  scan(scanId: string): ScanEndpoint {\n    return new ScanEndpoint(this, '', ShowSdkBasePath, scanId)\n  }\n\n  qrCode(qrCodeId: string): QrCodeEndpoint {\n    return new QrCodeEndpoint(this, '', ShowSdkBasePath, qrCodeId)\n  }\n\n  user(userId: string): UserEndpoint {\n    return new UserEndpoint(this, '', ShowSdkBasePath, userId)\n  }\n\n  describeSdkEndpoints(): string[] {\n    const acc: string[] = []\n    this.account('{accountId}').describeSdkEndpoints(acc)\n    this.apiKey('{apiKeyId}').describeSdkEndpoints(acc)\n    this.asset('{assetId}').describeSdkEndpoints(acc)\n    this.contact('{contactid}').describeSdkEndpoints(acc)\n    this.invitation('{invitationId}').describeSdkEndpoints(acc)\n    this.project('{projectId}').describeSdkEndpoints(acc)\n    this.scan('{scanId}').describeSdkEndpoints(acc)\n    this.qrCode('{qrCodeId}').describeSdkEndpoints(acc)\n    this.user('{userId}').describeSdkEndpoints(acc)\n    return acc.sort();\n  }\n\n  // UTILITIES\n  // @TODO: IF WE HAD AN OO MODEL THIS WOULD ME A METHOD ON QRCODE\n\n  // eslint-disable-next-line class-methods-use-this\n  async saveQrImageDataToFile(qrCode: IQrCode, path: string) {\n    if (!qrCode.image?.data) {\n      throw new Error(`No image data present for QR code, qrCodeId='${qrCode.qrCodeId || ''}'`)\n    }\n    let binaryData: string\n    if (qrCode.image?.options?.dataUrl) {\n      binaryData = Buffer.from(qrCode.image!.data!.replace(/^data:image\\/\\w+;base64,/, ''), 'base64').toString('binary');\n    } else {\n      binaryData = Buffer.from(qrCode.image!.data!, 'base64').toString('binary');\n    }\n    await fs.writeFile(path, binaryData, 'binary');\n  }\n}\n\n// eslint-disable-next-line no-multi-assign,@typescript-eslint/no-unused-vars\n// module.exports = exports = Openscreen\n"],"names":["CognitoUserAsync","CognitoUser","async","authenticationDetails","Promise","resolve","reject","super","authenticateUser","onSuccess","session","onFailure","err","mfaRequired","challengeName","challengeParameters","selectMFAType","mfaSetup","totpRequired","customChallenge","getSession","CognitoUserPoolAsync","CognitoUserPool","getStorage","storage","getClientId","clientId","username","password","userAttributes","validationData","signUp","result","UserPool","constructor","userPoolId","userPool","this","UserPoolId","ClientId","Storage","getCognitoUserPool","getUser","key","getItem","Buffer","from","toString","Username","Pool","lastAuthUser","secret","cognitoUser","AuthenticationDetails","Password","then","response","getUsername","setItem","email","attributes","attributeList","push","CognitoUserAttribute","Name","Value","givenName","middleName","familyName","phoneNumber","Request","axios","create","timeout","responseType","maxContentLength","maxBodyLength","maxRedirects","decompress","path","baseURL","pathSegments","parts","replace","forEach","segment","join","makeURL","getCloudConfig","endpoint","user","getActiveUser","Error","getAccessToken","getJwtToken","params","data","options","url","process","env","OS_DEBUG","console","debug","JSON","stringify","post","headers","Authorization","getAuthorization","get","patch","delete","Endpoint","basePath","sdkBasePath","entityName","id","request","sdkPath","getRequest","sdkEntityName","name","endsWith","substring","length","getPath","getSdkPath","describeSdkEndpoints","acc","AccountProjectsEndpoint","account","project","getList","AccountProjectEndpoint","projectId","AccountApiKeysEndpoint","apiKey","AccountInvitationsEndpoint","invitation","AccountUsersEndpoint","AccountUserEndpoint","userId","AccountEndpoint","accountId","properties","apiKeys","invitations","projects","users","ApiKeyEndpoint","apiKeyId","AccountStatus","AccountUserRole","ProjectInvitationStatus","ProjectStatus","ProjectUserRole","QrCodeErrorCorrectionLevel","QrCodeIntentType","QrCodeLocatorKeyType","QrCodeStatus","QrCodeType","AssetContactsEndpoint","asset","contact","queryParemeters","AssetContactEndpoint","contactId","type","AssetScansEndpoint","queryParams","AssetQrCodesEndpoint","qrCode","locatorKeyType","SHORT_URL","AssetEndpoint","assetId","contacts","scans","qrCodes","ContactEndpoint","InvitationEndpoint","invitationId","ProjectAssetsEndpoint","ProjectAssetsBatchEndpoint","assets","postBatch","ProjectContactsEndpoint","ProjectContactsBatchEndpoint","ProjectUsersEndpoint","ProjectUserEndpoint","ProjectQrCodesEndpoint","ProjectEndpoint","assetsBatch","contactsBatch","ScanContactEndpoint","scan","ScanContactsEndpoint","ScanSmssEndpoint","sms","ScanEndpoint","scanId","smss","QrCodeEndpoint","qrCodeId","UserAccountsEndpoint","UserEndpoint","accounts","Openscreen","_config","cloudConfigName","cloudConfig","isAdministrator","activeUser","requestFactory","forEntity","client","commonClient","config","environment","apikeys","qrcodes","getConfig","poolId","info","authenticate","idToken","getIdToken","idInfo","payload","sub","groups","includes","moment","getExpiration","fromNow","getIssuedAt","stageAndAuth","catch","message","authorize","sort","image","_qrCode$image","binaryData","_qrCode$image2","_qrCode$image2$option","dataUrl","fs","writeFile"],"mappings":"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"}