import { Endpoint } from './endpoint';
import { IProject, IAsset, IContact, IAccountInvitation, IQrCode } from './entities';
import { IOpenscreenSession } from './openscreen-session';
export declare class ProjectAssetsEndpoint extends Endpoint {
    constructor(project: ProjectEndpoint);
    create(asset: IAsset): Promise<any>;
    get(): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class ProjectAssetsBatchEndpoint extends Endpoint {
    constructor(project: ProjectEndpoint);
    create(assets: any): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class ProjectContactsEndpoint extends Endpoint {
    constructor(project: ProjectEndpoint);
    create(contact: IContact): Promise<any>;
    get(): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class ProjectContactsBatchEndpoint extends Endpoint {
    constructor(project: ProjectEndpoint);
    create(contacts: any): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class ProjectInvitationsEndpoint extends Endpoint {
    constructor(project: ProjectEndpoint);
    create(invitation: IAccountInvitation): Promise<any>;
    get(): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class ProjectUsersEndpoint extends Endpoint {
    constructor(project: ProjectEndpoint);
    get(): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class ProjectUserEndpoint extends Endpoint {
    constructor(project: ProjectEndpoint, userId: string);
    delete(): Promise<boolean>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class ProjectQrCodesEndpoint extends Endpoint {
    constructor(project: ProjectEndpoint);
    create(qrCode: IQrCode): Promise<any>;
    get(params: any): Promise<any>;
    describeSdkEndpoints(acc: string[]): void;
}
export declare class ProjectEndpoint extends Endpoint {
    constructor(session: IOpenscreenSession, basePath: string, sdkBasePath: string, projectId: string);
    get(): Promise<any>;
    update(properties: IProject): Promise<any>;
    delete(): Promise<boolean>;
    assets(): ProjectAssetsEndpoint;
    assetsBatch(): ProjectAssetsBatchEndpoint;
    contacts(): ProjectContactsEndpoint;
    contactsBatch(): ProjectContactsBatchEndpoint;
    users(): ProjectUsersEndpoint;
    user(userId: string): ProjectUserEndpoint;
    qrCodes(): ProjectQrCodesEndpoint;
    describeSdkEndpoints(acc: string[]): void;
}
//# sourceMappingURL=projects.d.ts.map